/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

import { DemoPalette, Page, PrinterQueueItem } from "./common.60";
import { CopyPage } from "./copy_page.60";
import { ScanPage } from "./scan_page.60";

ActionButton := Rectangle {

    property <resource> icon <=> img.source;
    property <string> text <=> label.text;
    callback clicked;

    VerticalLayout {
        spacing: 4px;

        Rectangle {
            border-radius: 25px;
            border-width: 5px;
            border-color: DemoPalette.control_outline_color;
            background: DemoPalette.printer_action_background_color;

            img := Image {
                x: (parent.width / 2) - (self.width / 2);
                y: (parent.height / 2) - (self.height / 2);
                colorize: DemoPalette.text_foreground_color;
            }
        }

        label := Text {
            font-size: 22px;
            font-weight: 800;
            horizontal-alignment: center;
            color: DemoPalette.text_foreground_color;
        }
    }

    TouchArea { clicked => { root.clicked() } }
}

PrintQueueDetailsLabel := Text {
    font-weight: 500;
    color: DemoPalette.control_foreground;
}

PrintQueueSeparator := Rectangle {
    height: 1px;
    border-width: 1px;
    border-color: #BDC0D1;
}

PrintQueueElement := Rectangle {
    property <PrinterQueueItem> queue_item;

    border-color: DemoPalette.control_outline_color;
    border-radius: 14px;
    border-width: 2px;
    background: DemoPalette.printer_queue_item_background_color;

    property <bool> expanded;

    VerticalLayout {
        padding: parent.border_radius;
        spacing: 4px;

        Text {
            text: queue_item.status;
            color: DemoPalette.status_label_text_color;
        }

        Text {
            text: queue_item.title;
            overflow: elide;
            font-weight: 800;
        }

        if (expanded) : GridLayout {
            Row {
                PrintQueueDetailsLabel {
                    text: "Owner";
                }
                Text {
                    text: queue_item.owner;
                    color: DemoPalette.secondary_foreground_color;
                }
            }
            Row {
                PrintQueueSeparator {
                    colspan: 2;
                }
            }
            Row {
                PrintQueueDetailsLabel {
                    text: "Pages";
                }
                Text {
                    text: queue_item.pages;
                    color: DemoPalette.secondary_foreground_color;
                }
            }
            Row {
                PrintQueueSeparator {
                    colspan: 2;
                }
            }
            Row {
                PrintQueueDetailsLabel {
                    text: "Size";
                }
                Text {
                    text: queue_item.pages;
                    color: DemoPalette.secondary_foreground_color;
                }
            }
            Row {
                PrintQueueSeparator {
                    colspan: 2;
                }
            }
            Row {
                PrintQueueDetailsLabel {
                    text: "Submitted";
                }
                Text {
                    text: queue_item.submission_date;
                    color: DemoPalette.secondary_foreground_color;
                }
            }
        }
    }

    TouchArea {
        clicked => {
            expanded = !expanded;
        }
    }
}

PrinterQueue := Rectangle {
    property <[PrinterQueueItem]> printer_queue;

    border-radius: 27px;
    background: DemoPalette.night_mode ? DemoPalette.printer_action_background_color : #F4F6FF;

    VerticalLayout {
        alignment: start;

        Text {
            text: "Printing-Queue";
            color: DemoPalette.text_foreground_color;
            font-size: 24px;
        }

        Flickable {
            viewport_width: root.width - 2 * root.border_radius;
            viewport_height: 2000px; /* FIXME: the flickable needs to learn its viewport height from the layout */

            VerticalLayout {
                alignment: start;
                padding-top: root.border_radius;
                padding-bottom: root.border_radius;


                VerticalLayout {
                    alignment: start;
                    spacing: root.border_radius / 2;

                    for queue_item[idx] in root.printer_queue: PrintQueueElement {
                        queue_item: queue_item;
                    }
                }
            }
        }
    }
}

export HomePage := Page {
    property <length> header_row_height: 40px;
    property <[PrinterQueueItem]> printer_queue <=> queue_view.printer_queue;

    property <length> button_spacing: root.width / 12;
    property <length> button_width: root.width / 3 - 2 * button_spacing;
    property <length> button_height: button_width + /* spacing */ 4px + /* label size */ 22px;

    header: "Xerol 1347 hdp";

    property <int> current_subpage: 0;


    for action[idx] in [
        { name: "Print", icon: @image-url("images/print.svg") },
        { name: "Scan", icon: @image-url("images/scan.svg") },
        { name: "Copy", icon: @image-url("images/copy.svg") },
        { name: "USB", icon: @image-url("images/usb.svg") },
    ]: ActionButton {
        x: mod(idx, 2) * (button_width + button_spacing);
        y: floor(idx / 2) * (button_height + button_spacing) + /* header row height */ 40px;
        width: button_width;
        height: button_height;
        icon: action.icon;
        text: action.name;
        clicked => { current_subpage = idx + 1; }
    }

    queue_view := PrinterQueue {
        x: parent.width / 2;
        width: 50%;
    }

    Page {
        header: "Print";
        x: current_subpage == 1 ? 0 : parent.width + parent.x;
        animate x { duration: 125ms; easing: ease; }
        has_back_button: true;
        back => { current_subpage = 0 }
    }
    ScanPage {
        x: current_subpage == 2 ? 0 : parent.width + parent.x;
        animate x { duration: 125ms; easing: ease; }
        back => { current_subpage = 0 }
    }
    CopyPage {
        x: current_subpage == 3 ? 0 : parent.width + parent.x;
        animate x { duration: 125ms; easing: ease; }
        back => { current_subpage = 0 }
    }
    Page {
        header: "USB";
        x: current_subpage == 4 ? 0 : parent.width + parent.x;
        animate x { duration: 125ms; easing: ease; }
        has_back_button: true;
        back => { current_subpage = 0 }
    }
}